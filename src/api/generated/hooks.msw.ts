/**
 * Generated by orval v6.12.1 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { rest } from "msw";
import { faker } from "@faker-js/faker";

export const getGetCommentListMock = () => ({});

export const getUpdateCommentMock = () => ({});

export const getInsertCommentMock = () => ({});

export const getCategoriesMock = () => ({});

export const getUpdateCategoryMock = () => ({});

export const getInsertCategoryMock = () => ({});

export const getDeleteCategoryMock = () => ({});

export const getBoards1Mock = () => ({});

export const getBoardUpdateMock = () => ({});

export const getBoardMock = () => ({});

export const getBlameTypeListMock = () => ({});

export const getInsertBlameTypeMock = () => ({});

export const getInsertBlameType1Mock = () => ({});

export const getInsertAlarmChkMock = () => ({});

export const getDeleteAlarmMock = () => ({});

export const getUpdateAlarmMock = () => ({});

export const getSetUserMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  nickName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
  gender: faker.helpers.arrayElement([faker.helpers.arrayElement(["MALE", "FEMALE", "OTHER"]), undefined]),
  age: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  email: faker.helpers.arrayElement([faker.random.word(), undefined])
});

export const getGetUserByTokenMock = () => ({
  alreadyJoined: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  alreadySetted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  userRes: faker.helpers.arrayElement([
    {
      id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      nickName: faker.helpers.arrayElement([faker.random.word(), undefined]),
      mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
      gender: faker.helpers.arrayElement([faker.helpers.arrayElement(["MALE", "FEMALE", "OTHER"]), undefined]),
      age: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      email: faker.helpers.arrayElement([faker.random.word(), undefined])
    },
    undefined
  ])
});

export const getLoginMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  nickName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
  gender: faker.helpers.arrayElement([faker.helpers.arrayElement(["MALE", "FEMALE", "OTHER"]), undefined]),
  age: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  email: faker.helpers.arrayElement([faker.random.word(), undefined])
});

export const getInfiniteLoginMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  nickName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
  gender: faker.helpers.arrayElement([faker.helpers.arrayElement(["MALE", "FEMALE", "OTHER"]), undefined]),
  age: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  email: faker.helpers.arrayElement([faker.random.word(), undefined])
});

export const getJoinMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  email: faker.helpers.arrayElement([faker.random.word(), undefined]),
  name: faker.helpers.arrayElement([faker.random.word(), undefined]),
  nickName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
  introduction: faker.helpers.arrayElement([faker.random.word(), undefined]),
  profileImage: faker.helpers.arrayElement([faker.random.word(), undefined])
});

export const getCommentLikeMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  userId: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  commentId: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
});

export const getBoardLikeMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  userId: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  boardId: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
});

export const getBlameMock = () => ({});

export const getGetAllBalanceMock = () => ({
  balances: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      balanceId: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      balanceTitle: faker.helpers.arrayElement([faker.random.word(), undefined]),
      balanceOptionRes: faker.helpers.arrayElement([
        Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
          id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
          optionTitle: faker.helpers.arrayElement([faker.random.word(), undefined]),
          hit: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
        })),
        undefined
      ])
    })),
    undefined
  ])
});

export const getInsertBalanceMock = () => ({});

export const getVoteBalanceGameMock = () => ({});

export const getInsertAlarmMock = () => ({});

export const getGetUserByIdMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  nickName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
  gender: faker.helpers.arrayElement([faker.helpers.arrayElement(["MALE", "FEMALE", "OTHER"]), undefined]),
  age: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  email: faker.helpers.arrayElement([faker.random.word(), undefined])
});

export const getCheckUserNickNameMock = () => faker.datatype.boolean();

export const getGetUserSelfMock = () => ({
  id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  nickName: faker.helpers.arrayElement([faker.random.word(), undefined]),
  mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
  gender: faker.helpers.arrayElement([faker.helpers.arrayElement(["MALE", "FEMALE", "OTHER"]), undefined]),
  age: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  email: faker.helpers.arrayElement([faker.random.word(), undefined]),
  profileImage: faker.helpers.arrayElement([faker.random.word(), undefined]),
  introduction: faker.helpers.arrayElement([faker.random.word(), undefined])
});

export const getBoardsMock = () => ({
  boards: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      title: faker.helpers.arrayElement([faker.random.word(), undefined]),
      nickname: faker.helpers.arrayElement([faker.random.word(), undefined]),
      regDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split(".")[0]}Z`, undefined]),
      hit: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      preview: faker.helpers.arrayElement([faker.random.word(), undefined]),
      likeCount: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      commentCount: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
    })),
    undefined
  ]),
  totalElement: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  totalPages: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  pageable: faker.helpers.arrayElement([
    {
      sort: faker.helpers.arrayElement([
        {
          sorted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          unsorted: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
          empty: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])
        },
        undefined
      ]),
      pageNumber: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      pageSize: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      paged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      unpaged: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
      offset: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
    },
    undefined
  ])
});

export const getGetUserMbtiMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
    count: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
  }));

export const getGetUserMbtiFromCategoryMock = () =>
  Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    mbti: faker.helpers.arrayElement([faker.random.word(), undefined]),
    count: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
  }));

export const getGetCommentList1Mock = () => ({});

export const getCategoriesCountMock = () => ({});

export const getBoardDetailMock = () => ({});

export const getBoardDeleteMock = () => ({});

export const getGetPreviewBoardsMock = () => ({});

export const getGetDetailBalanceMock = () => ({
  balanceId: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
  balanceTitle: faker.helpers.arrayElement([faker.random.word(), undefined]),
  balanceOptionRes: faker.helpers.arrayElement([
    Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined]),
      optionTitle: faker.helpers.arrayElement([faker.random.word(), undefined]),
      hit: faker.helpers.arrayElement([faker.datatype.number({ min: undefined, max: undefined }), undefined])
    })),
    undefined
  ])
});

export const getDeleteBalanceMock = () => ({});

export const getGetWhereUserVoteMock = () => ({});

export const getCommentUnLikeMock = () => faker.datatype.boolean();

export const getBoardUnLikeMock = () => faker.datatype.boolean();

export const getDeleteCommentMock = () => ({});

export const getInsertBlameType2Mock = () => ({});

export const getOpenAPIDefinitionMSW = () => [
  rest.get("*/api/comments", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetCommentListMock()));
  }),
  rest.put("*/api/comments", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getUpdateCommentMock()));
  }),
  rest.post("*/api/comments", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertCommentMock()));
  }),
  rest.get("*/api/categories", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getCategoriesMock()));
  }),
  rest.put("*/api/categories", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getUpdateCategoryMock()));
  }),
  rest.post("*/api/categories", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertCategoryMock()));
  }),
  rest.delete("*/api/categories", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getDeleteCategoryMock()));
  }),
  rest.get("*/api/boards", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoards1Mock()));
  }),
  rest.put("*/api/boards", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoardUpdateMock()));
  }),
  rest.post("*/api/boards", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoardMock()));
  }),
  rest.get("*/api/blame/type", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBlameTypeListMock()));
  }),
  rest.put("*/api/blame/type", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertBlameTypeMock()));
  }),
  rest.post("*/api/blame/type", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertBlameType1Mock()));
  }),
  rest.get("*/api/alarm/:alarmId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertAlarmChkMock()));
  }),
  rest.put("*/api/alarm/:alarmId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getDeleteAlarmMock()));
  }),
  rest.put("*/api/alarm/content", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getUpdateAlarmMock()));
  }),
  rest.post("*/api/users/set-profile", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getSetUserMock()));
  }),
  rest.post("*/api/users/oauth2", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetUserByTokenMock()));
  }),
  rest.post("*/api/users/login", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getLoginMock()));
  }),
  rest.post("*/api/users/login/infinite", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInfiniteLoginMock()));
  }),
  rest.post("*/api/users/join", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getJoinMock()));
  }),
  rest.post("*/api/like/comment", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getCommentLikeMock()));
  }),
  rest.post("*/api/like/board", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoardLikeMock()));
  }),
  rest.post("*/api/blame", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBlameMock()));
  }),
  rest.get("*/api/balances", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetAllBalanceMock()));
  }),
  rest.post("*/api/balances", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertBalanceMock()));
  }),
  rest.post("*/api/balances/vote", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getVoteBalanceGameMock()));
  }),
  rest.post("*/api/alarm", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertAlarmMock()));
  }),
  rest.get("*/api/users/:userId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetUserByIdMock()));
  }),
  rest.get("*/api/users/:nickName/nickname-exists", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getCheckUserNickNameMock()));
  }),
  rest.get("*/api/users/me", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetUserSelfMock()));
  }),
  rest.get("*/api/search", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoardsMock()));
  }),
  rest.get("*/api/mbti/users", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetUserMbtiMock()));
  }),
  rest.get("*/api/mbti/category/:categoryId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetUserMbtiFromCategoryMock()));
  }),
  rest.get("*/api/comments/best", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetCommentList1Mock()));
  }),
  rest.get("*/api/categories/popular", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getCategoriesCountMock()));
  }),
  rest.get("*/api/boards/:boardId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoardDetailMock()));
  }),
  rest.delete("*/api/boards/:boardId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoardDeleteMock()));
  }),
  rest.get("*/api/boards/preview", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetPreviewBoardsMock()));
  }),
  rest.get("*/api/balances/:balanceId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetDetailBalanceMock()));
  }),
  rest.delete("*/api/balances/:balanceId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getDeleteBalanceMock()));
  }),
  rest.get("*/api/balances/vote/:balanceId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getGetWhereUserVoteMock()));
  }),
  rest.delete("*/api/like/comment/:commentId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getCommentUnLikeMock()));
  }),
  rest.delete("*/api/like/board/:boardId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getBoardUnLikeMock()));
  }),
  rest.delete("*/api/comments/:commentId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getDeleteCommentMock()));
  }),
  rest.delete("*/api/blame/type/:blameTypeId", (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, "Mocked status"), ctx.json(getInsertBlameType2Mock()));
  })
];
